package cn.ritac.mmbs.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttPersistenceException;
import org.eclipse.paho.client.mqttv3.MqttTopic;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import cn.ritac.mmbs.comm.mqtt.ServerMQTT;
import cn.ritac.mmbs.comm.mqtt.message.KeyValue;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceConfigSetting;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceConfigUp;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceData;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceEventData;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceEventResult;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceLogin;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceLoginResult;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceSelfConfig;
import cn.ritac.mmbs.comm.mqtt.message.MsgDataEventInfo;
import cn.ritac.mmbs.comm.mqtt.newdev.MQTTAddrVal;
import cn.ritac.mmbs.comm.mqtt.newdev.MQTTDeviceStatusData;
import cn.ritac.mmbs.comm.mqtt.newdev.MsgDataDevInfo;
import cn.ritac.mmbs.comm.mqtt.newdev.MsgDataKernelInfo;
import cn.ritac.mmbs.comm.mqtt.newdev.MsgDataNewlogin;
import cn.ritac.mmbs.comm.mqtt.newdev.MsgDataNumberOfData;
import cn.ritac.mmbs.comm.mqtt.newdev.MsgDataUpOpt;
import cn.ritac.mmbs.mybatis.mapper.BakserveMapper;
import cn.ritac.mmbs.mybatis.mapper.DataupoptMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesAIMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesAIRecMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesDIMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesDIRecMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesDoMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesDoRecMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesEventRecMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesRegMapper;
import cn.ritac.mmbs.mybatis.mapper.DevicesRegRecMapper;
import cn.ritac.mmbs.mybatis.mapper.IOTCardMapper;
import cn.ritac.mmbs.mybatis.mapper.NumberOfDataMapper;
import cn.ritac.mmbs.mybatis.mapper.RegCameraMapper;
import cn.ritac.mmbs.mybatis.mapper.WorkingHourMapper;
import cn.ritac.mmbs.mybatis.model.Bakserve;
import cn.ritac.mmbs.mybatis.model.Dataupopt;
import cn.ritac.mmbs.mybatis.model.Devices;
import cn.ritac.mmbs.mybatis.model.DevicesAI;
import cn.ritac.mmbs.mybatis.model.DevicesAIRec;
import cn.ritac.mmbs.mybatis.model.DevicesDI;
import cn.ritac.mmbs.mybatis.model.DevicesDIRec;
import cn.ritac.mmbs.mybatis.model.DevicesDo;
import cn.ritac.mmbs.mybatis.model.DevicesDoRec;
import cn.ritac.mmbs.mybatis.model.DevicesEventRec;
import cn.ritac.mmbs.mybatis.model.DevicesReg;
import cn.ritac.mmbs.mybatis.model.DevicesRegRec;
import cn.ritac.mmbs.mybatis.model.IOTCard;
import cn.ritac.mmbs.mybatis.model.NumberOfData;
import cn.ritac.mmbs.mybatis.model.RegCamera;
import cn.ritac.mmbs.mybatis.model.WorkingHour;
import cn.ritac.mmbs.service.DevicesService;
import cn.ritac.mmbs.service.MQTTService;
import cn.ritac.mmbs.service.SseServices;
import cn.ritac.mmbs.util.DateTime;
import cn.ritac.mmbs.util.StringByteSize;
import cn.ritac.mmbs.web.dto.convert.MQTTControlCommandPojo;

@Service("MQTTService")
public class MQTTServiceImpl implements MQTTService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private DevicesMapper devicesMapper;

	@Autowired
	private ServerMQTT serverMQTT;

	@Autowired
	private DevicesDIMapper devicesDIMapper;

	@Autowired
	private DevicesDIRecMapper devicesDIRecMapper;

	@Autowired
	private DevicesAIMapper devicesAIMapper;

	@Autowired
	private DevicesAIRecMapper devicesAIRecMapper;

	@Autowired
	private DevicesDoMapper devicesDoMapper;

	@Autowired
	private DevicesDoRecMapper devicesDoRecMapper;

	@Autowired
	private DevicesEventRecMapper devicesEventRecMapper;

	@Autowired
	private DevicesRegMapper devicesRegMapper;

	@Autowired
	private DevicesRegRecMapper devicesRegRecMapper;

	@Autowired
	private BakserveMapper bakServerMapper;

	@Autowired
	private DataupoptMapper dataUpOptMapper;

	@Autowired
	private NumberOfDataMapper numberOfDataMapper;

	@Autowired
	private RegCameraMapper regCameraMapper;

	@Autowired
	private IOTCardMapper iotCardMapper;

	@Autowired
	private DevicesService devicesService;

	@Autowired
	private WorkingHourMapper workingHourMapper;

	@Autowired
	private SseServices sseServicesImp;

	// @Value("${mqtt.server.HOST}") // private String emqHOST; // 注入普通字符串
	// emq服务器地址

	// @Value("${api.map.baidu.ak}") // private String AK;
	// @Value("${api.map.baidu.sk}") // private String SK;

	// @Value("${mqtt.server.console.PORT}") // private String ConsolePort; //
	// 注入普通字符串 emq控制台端口号

	// @Value("${mqtt.server.QOS}")
	private int Qos = 2;

	private Object getDoBooleanValue(int key, KeyValue[] list) {
		for (KeyValue keyValue : list) {
			Object kv = keyValue.getAddr();
			int val = Integer.parseInt(kv == null ? "0" : kv.toString());
			if (val == key) {
				Object object = keyValue.getVal();
				if (object == null)
					return false;
				return object;
			}
		}
		return false;
	}

	private Object getAiDiValue(int key, KeyValue[] list) {
		for (KeyValue keyValue : list) {
			Object kv = keyValue.getAddr();
			int val = Integer.parseInt(kv == null ? "0" : kv.toString());
			if (val == key) {
				Object object = keyValue.getVal();
				if (object == null)
					return 0;
				return object;
			}
		}
		return 0;
	}

	private Object getRegValue(int key, MQTTAddrVal[] list) {
		for (MQTTAddrVal keyValue : list) {
			Object kv = keyValue.getAddr();
			int val = Integer.parseInt(kv == null ? "0" : kv.toString());
			if (val == key) {
				Object object = keyValue.getVal();
				if (object == null)
					return "";
				return object.toString();
			}
		}
		return 0;
	}

	public void countCardFlow(Object msg, String deviceNum) {
		Devices devSearch = new Devices();
		devSearch.setDeviceNum(deviceNum);
		devSearch = devicesMapper.selectOne(devSearch);
		if (!StringUtils.isEmpty(devSearch)) {
			if (!StringUtils.isEmpty(devSearch.getConnform()) && devSearch.getConnform() == 1) {
				IOTCard card = new IOTCard();
				card.setDeviceNum(deviceNum);
				card = iotCardMapper.selectOne(card);
				if (!StringUtils.isEmpty(card)) {
					Double use = StringByteSize.getSizeMB(msg);
					Double total_flow = Double.valueOf(card.getTotalFlow());
					Double used_flow = Double.valueOf(card.getUsedFlow());
					Map<String, Object> data = StringByteSize.CalculationFlow(total_flow, used_flow, use);
					card.setUsedFlow(data.get("used").toString());
					card.setResidueFlow(data.get("unused").toString());
					iotCardMapper.updateByPrimaryKey(card);
				}
			}
		}

	}

	/**
	* 配置信息上传 配置设备信息 服务端下发
	*/

	@Override
	public String setDeviceConfig(MQTTDeviceConfigSetting mqttDeviceConfigSetting) {
		String resMsg = "指令执行成功";
		MqttMessage msg = new MqttMessage();
		MqttTopic topic = serverMQTT.getClient().getTopic("RITAC/IN/YTJK/V1/" + mqttDeviceConfigSetting.getDeviceID());
		String data = JSONObject.toJSONString(mqttDeviceConfigSetting);
		msg.setQos(Qos);
		msg.setRetained(false);
		msg.setPayload(data.getBytes());
		try {
			serverMQTT.publish(topic, msg);
			// 统计流量
			countCardFlow(msg, mqttDeviceConfigSetting.getDeviceID());
			logger.info("设置设备配置命令下发---:" + data);
		} catch (MqttPersistenceException e) {
			logger.error("配置设备配置信息出错:" + data + ";请稍后重试！" + e.getMessage());
			resMsg = "配置设备配置信息出错;请联系管理员！";
			e.printStackTrace();
		} catch (MqttException e) {
			logger.error("配置设备配置信息出错:" + data + ";请稍后重试！" + e.getMessage());
			resMsg = "配置设备配置信息出错;请联系管理员！";
			e.printStackTrace();
		}
		return resMsg;

	}

	/**
	 * 修改设备自身属性
	 */
	@Override
	public String sendDeviceSelfConfigCommand(MQTTDeviceSelfConfig mqttDeviceSelfConfig) {
		String resMsg = "指令下发成功";
		MqttMessage msg = new MqttMessage();
		MqttTopic topic = serverMQTT.getClient().getTopic("RITAC/IN/YTJK/V1/" + mqttDeviceSelfConfig.getDeviceID());
		String objData = JSONObject.toJSONString(mqttDeviceSelfConfig, SerializerFeature.WriteDateUseDateFormat);
		msg.setQos(Qos);
		msg.setRetained(false);
		msg.setPayload(objData.getBytes());
		logger.info("更新设备参数命令下发---:" + objData);
		try {
			serverMQTT.publish(topic, msg);
			// 流量统计
			countCardFlow(msg, mqttDeviceSelfConfig.getDeviceID());
		} catch (MqttPersistenceException e) {
			logger.error("更新设备参命令下发出错:---:" + objData + ";请稍后重试！" + e.getMessage());
			e.printStackTrace();
			resMsg = "更新设备参命令下发出错,请联系管理员";
		} catch (MqttException e) {
			logger.error("更新设备参命令下发出错:---:" + objData + ";请稍后重试！" + e.getMessage());
			e.printStackTrace();
			resMsg = "更新设备参命令下发出错,请联系管理员";
		}
		return resMsg;
	}

	/**
	 * 设备注册
	 */
	@Override
	@Transactional(readOnly = false)
	public void sendLoginMsg(MQTTDeviceLogin login) {
		// 统计接受
		countCardFlow(login, login.getDeviceID());
		if (login.getProductId().equals("IVMB") && login.getProductKey().equals("NJcasyml")) {
			Devices devicesSerach = new Devices();
			devicesSerach.setDeviceNum(login.getDeviceID());
			devicesSerach.setDeviceKey(login.getDeviceKey());
			// 根据设备编号和设备密钥查询设备：有则修改 无则插入
			devicesSerach = devicesMapper.selectOne(devicesSerach);
			Date tmpdate = new Date();
			MsgDataNewlogin msgData = null;
			KeyValue[] bakServer = null;
			MsgDataDevInfo devInfo = null;
			MsgDataKernelInfo kernelInfo = null;
			MsgDataUpOpt dataUpOpt = null;
			MsgDataNumberOfData numberOfData = null;
			Devices devicesInfo = devicesSerach;
			// 初始化主类
			if (StringUtils.isEmpty(devicesSerach)) {
				devicesInfo = new Devices();
				devicesInfo.setOnline(true);
				devicesInfo.setOnlineTime(tmpdate);
				devicesInfo.setCreateTime(tmpdate);
			}
			// 判定注册信息
			if (!StringUtils.isEmpty(login)) {
				msgData = login.getMsgData();
				devicesInfo.setDeviceNum(login.getDeviceID());
				devicesInfo.setDeviceKey(login.getDeviceKey());
				devicesInfo.setDeviceModel(login.getModel());
				if (login.getLongitude() != null)
					devicesInfo.setLongitude(login.getLongitude());
				if (login.getDimension() != null)
					devicesInfo.setDimension(login.getDimension());
			}
			// 判定初始化数据
			if (!StringUtils.isEmpty(msgData)) {
				bakServer = msgData.getBakServer();
				devInfo = msgData.getDevInfo();
				kernelInfo = msgData.getKernelInfo();
				dataUpOpt = msgData.getDataUpOpt();
				numberOfData = msgData.getNumberOfData();
			}
			// 判定内核信息
			if (!StringUtils.isEmpty(kernelInfo)) {
				devicesInfo.setCputemper(kernelInfo.getCpuTemper());
				devicesInfo.setRamproportion(kernelInfo.getRamProportion());
				devicesInfo.setRomproportion(kernelInfo.getRomProportion());
				devicesInfo.setCpuproportion(kernelInfo.getCpuProportion());
			}
			// 判定基数数据
			if (!StringUtils.isEmpty(devInfo)) {
				devicesInfo.setVoltage((float) devInfo.getVoltage());
				devicesInfo.setCurrent(devInfo.getCurrent());
				devicesInfo.setFirstlink(devInfo.getFirstLink());
				devicesInfo.setConnform(devInfo.getConnForm());
				devicesInfo.setRestartcount(devInfo.getRestartCount());
				devicesInfo.setKeepaliveinterval(devInfo.getKeepAliveInterval());
				devicesInfo.setDatauptime(devInfo.getDataUpTime());
				devicesInfo.setFirstserver(devInfo.getFirstServer());
				// 升级变更属性
				devicesInfo.setSlaveentry(devInfo.getSlaveEntry());
				devicesInfo.setSignalquality(devInfo.getSignalQuality());
				devicesInfo.setSoftVersion(devInfo.getSoftVer());
				devicesInfo.setDeviceVersion(devInfo.getHardwareVer());
				devicesInfo.setWorkinghours(devInfo.getWorkingHours());
				devicesInfo.setNetworkinghours(devInfo.getNetworkinghours());
				String slaveId = "";
				int[] slaveIds = devInfo.getSlaveIDs();
				StringBuffer sb = new StringBuffer();
				if (!StringUtils.isEmpty(slaveIds) && slaveIds.length > 0) {
					for (int sl : slaveIds) {
						if (sb.length() > 0)
							sb.append(",");
						sb.append(sl);
					}
					devicesInfo.setSlaveids(sb.toString());
				} else {
					devicesInfo.setSlaveids(slaveId);
				}
				// 处理mmbs_workinghour表
				// 1. 先根据当前时间去取数据库数据,若有则取当前月份,再取表数据,若有修改,否则插入
				try {
					int deviceId = devicesSerach.getId();
					Date d = new Date();
					// 当前月份
					int month = DateTime.getMonth(d);
					// 根据id及起始时间获取数据
					WorkingHour whList = workingHourMapper.findWorkingHour(deviceId, month);
					Long work = devInfo.getWorkingHours();
					Long netWork = devInfo.getNetworkinghours();
					if (StringUtils.isEmpty(whList)) {
						// 新增
						whList = new WorkingHour();
						whList.setDeviceId(deviceId);
						whList.setWorkinghours(work);
						whList.setNetworkinghours(netWork);
						whList.setMonth(String.valueOf(month));
						whList.setCreateTime(new Date());
						workingHourMapper.insert(whList);
					} else {
						// 修改
						Long Nwork = whList.getWorkinghours() + work;
						Long NnetWork = whList.getNetworkinghours() + netWork;
						whList.setWorkinghours(Nwork);
						whList.setNetworkinghours(NnetWork);
						workingHourMapper.updateByPrimaryKey(whList);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			}
			// 判定注册是否首次
			int State = 1;
			if (StringUtils.isEmpty(devicesSerach)) {
				// 插入新注册数据
				devicesMapper.insert(devicesInfo);
			} else if (login.getMsgType() == 60001) {
				devicesInfo.setOnline(true);
				devicesInfo.setOnlineTime(tmpdate);
				devicesMapper.updateByPrimaryKey(devicesInfo);
				State = 2;
			} else {
				// 清除
				if (login.getMsgType() == 60009)
					State = 2;
				int pkid = devicesInfo.getId();
				devicesMapper.updateByPrimaryKey(devicesInfo);
				if (!StringUtils.isEmpty(bakServer)) {
					Bakserve bak = new Bakserve();
					bak.setDeviceId(pkid);
					bakServerMapper.delete(bak);
				}
				if (!StringUtils.isEmpty(dataUpOpt)) {
					Dataupopt dut = new Dataupopt();
					dut.setDeviceId(pkid);
					dataUpOptMapper.delete(dut);
				}
				if (!StringUtils.isEmpty(numberOfData)) {
					NumberOfData nod = new NumberOfData();
					nod.setDeviceId(pkid);
					numberOfDataMapper.delete(nod);
				}
				// 存入
				int id = devicesInfo.getId();
				if (!StringUtils.isEmpty(bakServer)) {
					for (KeyValue kv : bakServer) {
						Bakserve bs = new Bakserve();
						bs.setDeviceId(id);
						bs.setUrl(kv.getUrl());
						bs.setPort(Integer.parseInt(kv.getVal() == null ? "0" : kv.getVal().toString()));
						bs.setUpdateTime(tmpdate);
						bakServerMapper.insert(bs);
					}
				}
				if (!StringUtils.isEmpty(dataUpOpt)) {
					Dataupopt duo = new Dataupopt();
					BeanUtils.copyProperties(dataUpOpt, duo);
					duo.setDeviceId(id);
					duo.setAin(dataUpOpt.getAin());
					duo.setUpdateTime(tmpdate);
					dataUpOptMapper.insert(duo);
				}
				if (!StringUtils.isEmpty(numberOfData)) {
					NumberOfData nod = new NumberOfData();
					BeanUtils.copyProperties(numberOfData, nod);
					nod.setDeviceId(id);
					nod.setUpdateTime(tmpdate);
					numberOfDataMapper.insert(nod);
				}
			}
			// 返回注册成功消息
			try {
				MQTTDeviceLoginResult loginResult = new MQTTDeviceLoginResult();
				loginResult.setDeviceID(login.getDeviceID());
				loginResult.setDeviceKey(login.getDeviceKey());
				loginResult.setMsgType(login.getMsgType());
				loginResult.setMsgState(State);
				loginResult.setReairectAddr("www.addr.io");
				loginResult.setReairectPort(1883);

				MqttTopic topic = serverMQTT.getClient().getTopic("RITAC/IN/YTJK/V1/" + login.getDeviceID());
				MqttMessage msg = new MqttMessage();
				msg.setQos(Qos);
				msg.setRetained(false);
				msg.setPayload(JSONObject.toJSONString(loginResult).getBytes());
				logger.info("返回注册成功消息给设备!! Topic:" + topic + " msg:" + msg);
				serverMQTT.publish(topic, msg);
				// 流量统计
				countCardFlow(msg, login.getDeviceID());
			} catch (MqttPersistenceException e) {
				logger.error("发送注册失败:" + e.getMessage());
				e.printStackTrace();
			} catch (MqttException e) {
				logger.error("发送注册失败:" + e.getMessage());
				e.printStackTrace();
			}
		} else {
			logger.error("注册密钥错误:" + login.getProductId() + "key:" + login.getProductKey());
		}
	}

	/**
	 * 更新设备上线下线状态 服务端下发
	 */
	@Override
	public void getDeviceStatus(MQTTDeviceStatusData statusData) {

		String slaveId = "";
		int[] slaveIds = null;
		if (statusData != null) {
			Date nowTime = statusData.getTime() == null ? new Date() : statusData.getTime();
			if (!StringUtils.isEmpty(statusData.getMsgData())) {
				if (!StringUtils.isEmpty(statusData.getMsgData().getDevInfo())) {
					slaveIds = statusData.getMsgData().getDevInfo().getSlaveIDs();
					StringBuffer sb = new StringBuffer();
					for (int sl : slaveIds) {
						if (sb.length() > 0)
							sb.append(",");
						sb.append(sl);
					}
					slaveId = sb.toString();
				}

			}
			slaveId = slaveIds == null ? "" : slaveId;

			String deviceId = statusData.getDeviceID();
			int msgType = statusData.getMsgType();
			// 流量统计
			countCardFlow(statusData, deviceId);
			if (msgType == 60003) {// 上线
				devicesMapper.saveStatusOnLine(deviceId, slaveId, nowTime);
			} else if (msgType == 60004) {// 离线
				devicesMapper.saveStatusUnOnLine(deviceId, slaveId, nowTime);
			}
		}

	}

	/**
	 *
	 * 控制命令下发 服务器端下发
	 * 
	 ***/
	@Override
	public void sendDeviceControlCommand(MQTTControlCommandPojo commandPojo) {
		MqttMessage msg = new MqttMessage();
		try {
			MqttTopic topic = serverMQTT.getClient().getTopic("RITAC/IN/YTJK/V1/" + commandPojo.getDeviceID());
			msg.setQos(Qos);
			msg.setRetained(false);
			msg.setPayload(JSONObject.toJSONString(commandPojo).getBytes());
			serverMQTT.publish(topic, msg);
			// 流量统计
			countCardFlow(msg, commandPojo.getDeviceID());
			logger.info("控制命令下发---:" + JSONObject.toJSONString(commandPojo));
		} catch (MqttPersistenceException e) {
			logger.error("控制命令下发出错:" + e.getMessage() + ";请稍后重试！");
			e.printStackTrace();
		} catch (MqttException e) {
			logger.error("控制命令下发出错:" + e.getMessage() + ";请稍后重试！");
			e.printStackTrace();
		}
	}

	/**
	 * < 数据上传> 得到设备端上传 设备端
	 */
	@Override
	@Transactional
	public void getBaseData(MQTTDeviceData data) {
		String device_id = data.getDeviceID();
		String device_key = data.getDeviceKey();
		Date updateTime = new Date();
		// 流量统计
		countCardFlow(data, device_id);
		Devices devicesInfo = new Devices();
		devicesInfo.setDeviceNum(device_id);
		devicesInfo.setDeviceKey(device_key);
		List<Devices> devicesList = devicesMapper.select(devicesInfo);
		if (devicesList.size() > 0) {
			devicesInfo = devicesList.get(0);
			try {
				int deviceId = devicesInfo.getId();

				/* 判断是否包含数据 */
				if (data.getMsgData() != null) {

					int slaveId = data.getMsgData().getAddr();
					slaveId = slaveId == 0 ? 1 : slaveId;

					/* 修改设备内核信息 */
					if (data.getMsgData().getKernelInfo() != null) {
						devicesInfo.setCputemper(data.getMsgData().getKernelInfo().getCpuTemper());
						devicesInfo.setRamproportion(data.getMsgData().getKernelInfo().getRamProportion());
						devicesInfo.setRomproportion(data.getMsgData().getKernelInfo().getRomProportion());
						devicesInfo.setCpuproportion(data.getMsgData().getKernelInfo().getCpuProportion());
						devicesMapper.updateByPrimaryKey(devicesInfo);
					}

					/* 模拟量输入 */
					if (data.getMsgData().getAin() != null) {
						DevicesAI devicesAI = new DevicesAI();
						devicesAI.setDeviceId(deviceId);// 设备表主键
						// 删除原有设备ai数据
						devicesAIMapper.delete(devicesAI);
						devicesAI.setTemper(Float.parseFloat(getAiDiValue(1, data.getMsgData().getAin()).toString()));// 温度
						devicesAI.setHumidity(Float.parseFloat(getAiDiValue(2, data.getMsgData().getAin()).toString()));// 湿度
						devicesAI.setIlluminance(
								Float.parseFloat(getAiDiValue(3, data.getMsgData().getAin()).toString()));// 照度
						devicesAI.setCurrent(Float.parseFloat(getAiDiValue(4, data.getMsgData().getAin()).toString()));// 电流
						devicesAI.setVoltage(Float.parseFloat(getAiDiValue(5, data.getMsgData().getAin()).toString()));// 电压
						devicesAI.setCurrentLeakagelimit(
								Float.parseFloat(getAiDiValue(6, data.getMsgData().getAin()).toString()));// 漏电流
						devicesAI.setUpsVoltage(
								Float.parseFloat(getAiDiValue(7, data.getMsgData().getAin()).toString()));// ups电压
						devicesAI.setUpsCurrent(
								Float.parseFloat(getAiDiValue(8, data.getMsgData().getAin()).toString()));// ups充放电流
						devicesAI.setUpsSurpluscapacityMa(
								Float.parseFloat(getAiDiValue(9, data.getMsgData().getAin()).toString()));// UPS剩余容量：毫安时
						devicesAI.setUpsSurpluscapacityPer(
								Float.parseFloat(getAiDiValue(10, data.getMsgData().getAin()).toString()));// PS剩余容量：百分比
						devicesAI.setUpsUppertemper(
								Float.parseFloat(getAiDiValue(11, data.getMsgData().getAin()).toString()));// UPS最高温度
						devicesAI.setUpsLowertemper(
								Float.parseFloat(getAiDiValue(12, data.getMsgData().getAin()).toString()));// UPS最低温度
						devicesAI.setUpdateTime(updateTime);
						/* 插入设备最新ai数据 */
						devicesAIMapper.insert(devicesAI);

						// 记录表
						DevicesAIRec dar = new DevicesAIRec();
						dar.setDeviceId(deviceId);
						dar.setTemper(Float.parseFloat(getAiDiValue(1, data.getMsgData().getAin()).toString()));// 温度
						dar.setHumidity(Float.parseFloat(getAiDiValue(2, data.getMsgData().getAin()).toString()));// 湿度
						dar.setIlluminance(Float.parseFloat(getAiDiValue(3, data.getMsgData().getAin()).toString()));// 照度
						dar.setCurrent(Float.parseFloat(getAiDiValue(4, data.getMsgData().getAin()).toString()));// 电流
						dar.setVoltage(Float.parseFloat(getAiDiValue(5, data.getMsgData().getAin()).toString()));// 电压
						dar.setCurrentLeakagelimit(
								Float.parseFloat(getAiDiValue(6, data.getMsgData().getAin()).toString()));// 漏电流
						dar.setUpsVoltage(Float.parseFloat(getAiDiValue(7, data.getMsgData().getAin()).toString()));// ups电压
						dar.setUpsCurrent(Float.parseFloat(getAiDiValue(8, data.getMsgData().getAin()).toString()));// ups充放电流
						dar.setUpsSurpluscapacityMa(
								Float.parseFloat(getAiDiValue(9, data.getMsgData().getAin()).toString()));// UPS剩余容量：毫安时
						dar.setUpsSurpluscapacityPer(
								Float.parseFloat(getAiDiValue(10, data.getMsgData().getAin()).toString()));// PS剩余容量：百分比
						dar.setUpsUppertemper(
								Float.parseFloat(getAiDiValue(11, data.getMsgData().getAin()).toString()));// UPS最高温度
						dar.setUpsLowertemper(
								Float.parseFloat(getAiDiValue(12, data.getMsgData().getAin()).toString()));// UPS最低温度
						dar.setUpdateTime(updateTime);
						/* 插入设备ai数据记录表 */
						devicesAIRecMapper.insert(dar);
					}

					/* 开关量输入 */
					if (data.getMsgData().getDin() != null) {
						DevicesDI devicesDI = new DevicesDI();
						devicesDI.setDeviceId(deviceId);
						// 删除设备原有di记录
						devicesDIMapper.delete(devicesDI);
						devicesDI.setMainPowerStatus(((boolean) (getDoBooleanValue(1, data.getMsgData().getDin()))));// 主电源状态
						devicesDI.setDoorStatus(((boolean) (getDoBooleanValue(2, data.getMsgData().getDin()))));// 柜门状态
						devicesDI.setUpsStatus(((boolean) (getDoBooleanValue(3, data.getMsgData().getDin()))));// UPS状态
						devicesDI.setProtectStatus(((boolean) (getDoBooleanValue(4, data.getMsgData().getDin()))));// 浪涌保护器状态
						devicesDI.setUpdateTime(updateTime);
						/* 插入最新di状态 */
						devicesDIMapper.insert(devicesDI);

						// 记录表
						DevicesDIRec ddr = new DevicesDIRec();
						ddr.setDeviceId(deviceId);
						ddr.setMainPowerStatus(((boolean) (getDoBooleanValue(1, data.getMsgData().getDin()))));// 主电源状态
						ddr.setDoorStatus(((boolean) (getDoBooleanValue(2, data.getMsgData().getDin()))));// 柜门状态
						ddr.setUpsStatus(((boolean) (getDoBooleanValue(3, data.getMsgData().getDin()))));// UPS状态
						ddr.setProtectStatus(((boolean) (getDoBooleanValue(4, data.getMsgData().getDin()))));// 浪涌保护器状态
						ddr.setUpdateTime(updateTime);
						/* 插入设备di状态记录表 */
						devicesDIRecMapper.insert(ddr);
					}

					/* 开关量输出 */
					if (data.getMsgData().getDout() != null) {
						DevicesDo devicesDo = new DevicesDo();
						devicesDo.setDeviceId(deviceId);
						// 删除原有设备do信息
						devicesDoMapper.delete(devicesDo);
						devicesDo.setElecLock((boolean) getDoBooleanValue(1, data.getMsgData().getDout()));// 电磁锁状态
						devicesDo.setLight((boolean) getDoBooleanValue(2, data.getMsgData().getDout()));// 照明灯
						devicesDo.setFan((boolean) getDoBooleanValue(3, data.getMsgData().getDout()));// 风扇
						devicesDo.setHeating((boolean) getDoBooleanValue(4, data.getMsgData().getDout()));// 加热器
						devicesDo.setBeep((boolean) getDoBooleanValue(5, data.getMsgData().getDout()));// 蜂鸣器
						devicesDo.setReclosState((boolean) getDoBooleanValue(6, data.getMsgData().getDout()));// 自动重合闸状态
						devicesDo.setRelayState_1((boolean) getDoBooleanValue(7, data.getMsgData().getDout()));// ONU
						devicesDo.setRelayState_2((boolean) getDoBooleanValue(8, data.getMsgData().getDout()));// 交换机
						devicesDo.setRelayState_3((boolean) getDoBooleanValue(9, data.getMsgData().getDout()));// 摄相机1
						devicesDo.setRelayState_4((boolean) getDoBooleanValue(10, data.getMsgData().getDout()));// 摄相机2
						devicesDo.setRelayState_5((boolean) getDoBooleanValue(11, data.getMsgData().getDout()));// 继电器5状态
						devicesDo.setRelayState_6((boolean) getDoBooleanValue(12, data.getMsgData().getDout()));// 继电器6状态
						devicesDo.setWaringSilencing((boolean) getDoBooleanValue(13, data.getMsgData().getDout()));// 报警器消音
						devicesDo.setUpdateTime(updateTime);
						/* 插入最新do状态 */
						devicesDoMapper.insert(devicesDo);

						// 记录表
						DevicesDoRec dor = new DevicesDoRec();
						dor.setDeviceId(deviceId);
						dor.setElecLock((boolean) getDoBooleanValue(1, data.getMsgData().getDout()));// 电磁锁状态
						dor.setLight((boolean) getDoBooleanValue(2, data.getMsgData().getDout()));// 照明灯
						dor.setFan((boolean) getDoBooleanValue(3, data.getMsgData().getDout()));// 风扇
						dor.setHeating((boolean) getDoBooleanValue(4, data.getMsgData().getDout()));// 加热器
						dor.setBeep((boolean) getDoBooleanValue(5, data.getMsgData().getDout()));// 蜂鸣器
						dor.setReclosState((boolean) getDoBooleanValue(6, data.getMsgData().getDout()));// 自动重合闸状态
						dor.setRelayState_1((boolean) getDoBooleanValue(7, data.getMsgData().getDout()));// ONU
						dor.setRelayState_2((boolean) getDoBooleanValue(8, data.getMsgData().getDout()));// 交换机
						dor.setRelayState_3((boolean) getDoBooleanValue(9, data.getMsgData().getDout()));// 摄相机1
						dor.setRelayState_4((boolean) getDoBooleanValue(10, data.getMsgData().getDout()));// 摄相机2
						dor.setRelayState_5((boolean) getDoBooleanValue(11, data.getMsgData().getDout()));// 继电器5状态
						dor.setRelayState_6((boolean) getDoBooleanValue(12, data.getMsgData().getDout()));// 继电器6状态
						dor.setWaringSilencing((boolean) getDoBooleanValue(13, data.getMsgData().getDout()));// 报警器消音
						dor.setUpdateTime(updateTime);
						/* 插入do状态记录表 */
						devicesDoRecMapper.insert(dor);
					}

				}

			} catch (Exception ex) {
				logger.error("基本数据上传修改出错:" + ex.getMessage());
			}
		} else {
			logger.error("得到设备端上传密钥错误或者该设备还没注册:" + data.getDeviceID() + "key:" + data.getDeviceKey());
		}

	}

	/**
	 * 事件上传
	 */

	@Override
	public void getEvent(MQTTDeviceEventData eventData) {
		String deviceId = eventData.getDeviceID();
		String deviceKey = eventData.getDeviceKey();
		// 流量统计
		countCardFlow(eventData, deviceId);
		Devices devSearch = new Devices();
		devSearch.setDeviceNum(deviceId);
		devSearch.setDeviceKey(deviceKey);
		List<Devices> devices = devicesMapper.select(devSearch);
		if (!devices.isEmpty()) {
			Devices devicesInfo = devices.get(0);
			for (MsgDataEventInfo eventItem : eventData.getMsgData().getEventInfo()) {
				DevicesEventRec devicesEventRec = new DevicesEventRec();
				devicesEventRec.setDeviceId(devicesInfo.getId());
				devicesEventRec.setEventInfo(String.valueOf(eventItem.getEventSn()));
				devicesEventRec.setEventContent(eventItem.getEventContent());
				try {
					devicesEventRec
							.setCreateTime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(eventItem.getEventTime()));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				devicesEventRecMapper.insert(devicesEventRec);
			}

			// 事件获取成功，回传本次事件编号给设备，避免设备频繁发送重复事件

			MQTTDeviceEventResult eventResult = new MQTTDeviceEventResult();
			eventResult.setDeviceID(deviceId);
			eventResult.setDeviceKey(deviceKey);
			eventResult.setMsgState(1);
			eventResult.setMsgType(eventData.getMsgType());
			List<KeyValue> list = new ArrayList<KeyValue>();
			for (MsgDataEventInfo eventItem : eventData.getMsgData().getEventInfo()) {
				int sn = eventItem.getEventSn();
				KeyValue itm = new KeyValue();
				itm.setEventSn(sn);
				list.add(itm);
			}
			KeyValue[] kv = new KeyValue[] {};
			eventResult.setEventInfo(list.toArray(kv));
			MqttTopic topic = serverMQTT.getClient().getTopic("RITAC/IN/YTJK/V1/" + deviceId);
			MqttMessage msg = new MqttMessage();
			msg.setQos(Qos);
			msg.setRetained(false);
			msg.setPayload(JSONObject.toJSONString(eventResult).getBytes());
			System.out.println("返回注册成功消息给设备!! Topic:" + topic + " msg:" + msg);
			try {
				serverMQTT.publish(topic, msg);
				// 统计发出
				countCardFlow(msg, deviceId);
			} catch (MqttPersistenceException e) {
				e.printStackTrace();
				logger.error("事件回馈错误:" + e.getMessage());
			} catch (MqttException e) {
				e.printStackTrace();
				logger.error("事件回馈错误:" + e.getMessage());
			}

		} else {
			logger.error("得到事件端密钥错误:" + eventData.getDeviceID() + "key:" + eventData.getDeviceKey());
		}
	}

	/**
	 * 
	 * <配置上传> 配置信息上传流程 设备端上传
	 */

	@Override
	@Transactional(readOnly = false)
	public void getDeviceConfig(MQTTDeviceConfigUp mqttDeviceConfigUp) {
		String deviceID = mqttDeviceConfigUp.getDeviceID();
		String DeviceKey = mqttDeviceConfigUp.getDeviceKey();
		// 流量统计
		countCardFlow(mqttDeviceConfigUp, deviceID);
		Devices dev = new Devices();
		dev.setDeviceNum(deviceID);
		dev.setDeviceKey(DeviceKey);
		List<Devices> devices = devicesMapper.select(dev);
		if (!devices.isEmpty()) {
			for (Devices devicesInfo : devices) {
				try {
					// 设备主键id
					int deviceId = devicesInfo.getId();
					DevicesReg reg = new DevicesReg();

					reg.setDeviceId(deviceId);
					// 删除原有reg配置信息
					devicesRegMapper.delete(reg);
					MQTTAddrVal[] keyValues = new MQTTAddrVal[] {};
					List<MQTTAddrVal> list = mqttDeviceConfigUp.getMsgData().getReg();
					MQTTAddrVal[] data = list.toArray(keyValues);
					Date time = mqttDeviceConfigUp.getTime() == null ? new Date()
							: new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(mqttDeviceConfigUp.getTime());
					reg.setUpdateTime(time);

					reg.setDoorAlarmDelaytime(getRegValue(1, data).toString());// 开关门告警延迟时间
					reg.setLightingUpperlimit(getRegValue(2, data).toString());// 照明灯控制上限
					reg.setLightingLowerlimit(getRegValue(3, data).toString());// 照明灯控制下限
					reg.setTemperatureUppperlimit(getRegValue(4, data).toString());// 温度控制上限
					reg.setTemperatureLowerlimit(getRegValue(5, data).toString());// 温度控制下限
					reg.setVoltageUpperlimit(getRegValue(6, data).toString());// 电压上限
					reg.setVoltageLowerlimit(getRegValue(7, data).toString());// 电压下限
					reg.setCurrentUpperlimit(getRegValue(8, data).toString());// 电流上限
					reg.setCurrentLeakagelimit(getRegValue(9, data).toString());// 漏电流上限

					reg.setUpsWarningvoltageupper(getRegValue(129, data).toString());// UPS 预警电压上限
					reg.setUpsWarningvoltagelower(getRegValue(130, data).toString());// UPS 预警电压下限
					reg.setUpsWarningcapacityupper(getRegValue(131, data).toString());// UPS 预警容量上限
					reg.setUpsWarningcapacitylower(getRegValue(132, data).toString());// UPS 预警容量下限
					reg.setUpsChargeupperlimit(getRegValue(133, data).toString());// UPS 充电电流上限告警值
					reg.setUpsChargelowerlimit(getRegValue(134, data).toString());// UPS 充电电流上限告警值
					reg.setUpsDischargeupperlimit(getRegValue(135, data).toString());// UPS 放电电流上限告警值
					reg.setUpsDischargelowerlimit(getRegValue(136, data).toString());// UPS 放电电流下限告警值
					reg.setUpsTemperatureupperlimit(getRegValue(137, data).toString());// UPS 温度告警上限
					reg.setUpsTemperaturelowerlimit(getRegValue(138, data).toString());// UPS 温度告警下限
					devicesRegMapper.insert(reg);

					if (!StringUtils.isEmpty(getRegValue(33, data))) {
						RegCamera rc1 = new RegCamera();
						rc1.setDeviceId(deviceId);
						regCameraMapper.delete(rc1);
						rc1.setSn(getRegValue(33, data).toString());// 相机1 SN
						rc1.setModel(getRegValue(34, data).toString());// 相机1 MODEL
						rc1.setMac(getRegValue(35, data).toString());// 相机1 MAC
						rc1.setIp(getRegValue(36, data).toString());// 相机1 IP
						rc1.setState(getRegValue(37, data).toString());// 相机1 状态
						regCameraMapper.insert(rc1);
					}

					if (!getRegValue(38, data).equals(0)) {
						RegCamera rc2 = new RegCamera();
						rc2.setDeviceId(deviceId);
						rc2.setSn(getRegValue(38, data).toString());// 相机2 SN
						rc2.setModel(getRegValue(39, data).toString());// 相机2 MODEL
						rc2.setMac(getRegValue(40, data).toString());// 相机2 MAC
						rc2.setIp(getRegValue(41, data).toString());// 相机2 IP
						rc2.setState(getRegValue(42, data).toString());// 相机2状态
						regCameraMapper.insert(rc2);
					}

					// 插入设备设备配置信息记录表
					DevicesRegRec drr = new DevicesRegRec();
					drr.setDeviceId(deviceId);
					drr.setUpdateTime(time);
					drr.setDoorAlarmDelaytime(getRegValue(1, data).toString());// 开关门告警延迟时间
					drr.setLightingUpperlimit(getRegValue(2, data).toString());// 照明灯控制上限
					drr.setLightingLowerlimit(getRegValue(3, data).toString());// 照明灯控制下限
					drr.setTemperatureUppperlimit(getRegValue(4, data).toString());// 温度控制上限
					drr.setTemperatureLowerlimit(getRegValue(5, data).toString());// 温度控制下限
					drr.setVoltageUpperlimit(getRegValue(6, data).toString());// 电压上限
					drr.setVoltageLowerlimit(getRegValue(7, data).toString());// 电压下限
					drr.setCurrentUpperlimit(getRegValue(8, data).toString());// 电流上限
					drr.setCurrentLeakagelimit(getRegValue(9, data).toString());// 漏电流上限
					drr.setUpsWarningvoltageupper(getRegValue(129, data).toString());// UPS 预警电压上限
					drr.setUpsWarningvoltagelower(getRegValue(130, data).toString());// UPS 预警电压下限
					drr.setUpsWarningcapacityupper(getRegValue(131, data).toString());// UPS 预警容量上限
					drr.setUpsWarningcapacitylower(getRegValue(132, data).toString());// UPS 预警容量下限
					drr.setUpsChargeupperlimit(getRegValue(133, data).toString());// UPS 充电电流上限告警值
					drr.setUpsChargelowerlimit(getRegValue(134, data).toString());// UPS 充电电流上限告警值
					drr.setUpsDischargeupperlimit(getRegValue(135, data).toString());// UPS 放电电流上限告警值
					drr.setUpsDischargelowerlimit(getRegValue(136, data).toString());// UPS 放电电流下限告警值
					drr.setUpsTemperatureupperlimit(getRegValue(137, data).toString());// UPS 温度告警上限
					drr.setUpsTemperaturelowerlimit(getRegValue(138, data).toString());// UPS 温度告警下限
					devicesRegRecMapper.insert(drr);
				} catch (Exception e) {
					System.out.println(e.getMessage());
					logger.error("更新配置信息出错:" + e.getMessage());
				}
			}
		} else {
			logger.error("得到配置信息密钥错误或者该设备未注册:" + mqttDeviceConfigUp.getDeviceID() + "key:"
					+ mqttDeviceConfigUp.getDeviceKey());
		}
	}

	/**
	 * obj 消息类型 判断刷新ai di do 
	 * 分别调用 device 内封装的方法
	 */
	@Autowired
	ApplicationContext applicationContext;

	public String SendCallback(Object dNum) {
		String deviceNum = dNum.toString();
		Devices devSearch = new Devices();
		devSearch.setDeviceNum(deviceNum);
		devSearch = devicesMapper.selectOne(devSearch);
		String msgData = null;
		if (!StringUtils.isEmpty(devSearch)) {
			int id = devSearch.getId();
			Map<String, Object> resMap = new HashMap<String, Object>();
			Map<String, Object> aiMap = devicesService.sendAi(id);
			Map<String, Object> diMap = devicesService.sendDi(id);
			Map<String, Object> doutMap = devicesService.sendDo(id);
			Map<String, Object> chartsMap = devicesService.sendCharts(id);
			resMap.put("ain", aiMap.get("ain"));
			resMap.put("din", diMap.get("din"));
			resMap.put("dout", doutMap.get("dout"));
			resMap.put("charts", chartsMap.get("charts"));
			msgData = JSONObject.toJSONString(resMap, SerializerFeature.WriteDateUseDateFormat);
		}
		sseServicesImp.sendMsg(msgData);
		// RITAC/IN/YTJK/Page/#
		return "";
	}

}
