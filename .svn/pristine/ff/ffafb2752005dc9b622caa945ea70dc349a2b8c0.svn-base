package cn.ritac.mmbs.comm.mqtt;

/**
*
* Description:
* @author admin
* 2017年2月10日下午18:04:07
*/

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import com.alibaba.fastjson.JSONObject;
import cn.ritac.mmbs.comm.SpringContextHelper;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceBase;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceConfigUp;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceData;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceEventData;
import cn.ritac.mmbs.comm.mqtt.message.MQTTDeviceLogin;
import cn.ritac.mmbs.service.MQTTService;

/**
 * 发布消息的回调类
 *
 * 必须实现MqttCallback的接口并实现对应的相关接口方法CallBack 类将实现 MqttCallBack。
 * 每个客户机标识都需要一个回调实例。在此示例中，构造函数传递客户机标识以另存为实例数据。 在回调中，将它用来标识已经启动了该回调的哪个实例。
 * 必须在回调类中实现三个方法：
 *
 * public void messageArrived(MqttTopic topic, MqttMessage message)接收已经预订的发布。
 *
 * public void connectionLost(Throwable cause)在断开连接时调用。
 *
 * public void deliveryComplete(MqttDeliveryToken token)) 接收到已经发布的 QoS 1 或 QoS 2
 * 消息的传递令牌时调用。 由 MqttClient.connect 激活此回调。
 *
 */

public class PushCallback implements MqttCallbackExtended {

	@Autowired
	private MQTTService MQTTService;

	private MqttClient client;
	private String TOPIC;

	private org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());

	public PushCallback(MqttClient cl, String TOP) {
		this.client = cl;
		this.TOPIC = TOP;
	}

	public void connectionLost(Throwable cause) {

//		System.out.println("连接断开，可以做重连");
	}

	@Override
	public void connectComplete(boolean reconnect, String serverURI) {
		try {
			client.subscribe(TOPIC, 2);
			logger.info("reconnect success，resubscribe success ！！");
		} catch (MqttException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		System.out.println("deliveryComplete---------" + token.isComplete());
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		try {
			// subscribe后得到的消息会执行到这里面
			MQTTService = (cn.ritac.mmbs.service.MQTTService) SpringContextHelper.getBean("MQTTService");

			logger.info("接收消息主题 : " + topic);

			logger.info("接收消息Qos : " + message.getQos());
			String content = new String(message.getPayload());

			MQTTDeviceBase contextBase = (MQTTDeviceBase) JSONObject.parseObject(content, MQTTDeviceLogin.class);
			logger.info("MsgType=" + contextBase.getMsgType());

			logger.info("接收消息内容 : " + new String(message.getPayload()));
			switch (contextBase.getMsgType()) {
			case 1:// 设备端向服务端发布注册信息
				logger.info("设备端向服务端发布注册信息开始");
				MQTTDeviceLogin mqttDeviceLogin = JSONObject.parseObject(content, MQTTDeviceLogin.class);

				MQTTService.sendLoginMsg(mqttDeviceLogin);

				logger.info("设备端向服务端发布注册信息结束");
				break;
			case 2:// 数据上传流程
				logger.info("数据上传流程开始");
				MQTTDeviceData mqttDeviceData = JSONObject.parseObject(content, MQTTDeviceData.class);

				MQTTService.getBaseData(mqttDeviceData);
				logger.info("数据上传流程结束");
				break;
			case 3:// 事件上传流程

				logger.info(" 事件上传流程开始");
				MQTTDeviceEventData mqttDeviceEventData = JSONObject.parseObject(content, MQTTDeviceEventData.class);

				MQTTService.getEvent(mqttDeviceEventData);
				logger.info("事件上传流程结束");
				break;
			case 5:// 配置信息上传流程
				logger.info(" 配置信息上传流程开始");
				MQTTDeviceConfigUp mqttDeviceConfigUp = JSONObject.parseObject(content, MQTTDeviceConfigUp.class);

				MQTTService.getDeviceConfig(mqttDeviceConfigUp);
				logger.info(" 配置信息上传流程开始");
				break;
			default:
				break;
			}
			logger.info("接收消息内容 : " + new String(message.getPayload()));
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("pushcallback-error:" + e.getMessage());
		}
	}

}
